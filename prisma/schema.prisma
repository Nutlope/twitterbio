// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Event {
  id            String        @id @default(cuid()) @map("cuid")
  event         Json
  userId        String
  startDateTime DateTime      @default(now())
  endDateTime   DateTime      @default(now())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  eventList     List[]
  User          User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  FollowEvent   FollowEvent[]

  @@index([userId])
}

model List {
  id          String       @id @default(cuid())
  name        String
  description String
  userId      String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  events      Event[]
  User        User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  FollowList  FollowList[]

  @@index([userId])
}

model RequestResponse {
  id                  String   @id @default(cuid())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  modelInput          Json // Store the request payload
  modelOutput         Json? // Store the model output
  parsedOutput        Json? // Store the parsed output
  modelCompletionTime Int? // Store the time taken to complete the model
  modelStatus         String   @default("idle")
  source              String   @default("unknown")
}

model User {
  id              String        @id @default(cuid())
  username        String        @unique
  email           String        @unique
  displayName     String
  imageUrl        String        @map("userImage")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  lists           List[]
  events          Event[]
  followingEvents FollowEvent[]
  followingUsers  FollowUser[]  @relation(name: "Follower")
  followedByUsers FollowUser[]  @relation(name: "Following")
  followingLists  FollowList[]
}

enum Status {
  idle
  submitting
  success
  error
}

model FollowEvent {
  userId    String
  eventId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User  User  @relation(fields: [userId], references: [id])
  Event Event @relation(fields: [eventId], references: [id])

  @@id([userId, eventId])
  @@index([userId])
  @@index([eventId])
}

model FollowUser {
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Follower  User @relation(name: "Follower", fields: [followerId], references: [id])
  Following User @relation(name: "Following", fields: [followingId], references: [id])

  @@id([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model FollowList {
  userId    String
  listId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User User @relation(fields: [userId], references: [id])
  List List @relation(fields: [listId], references: [id])

  @@id([userId, listId])
  @@index([userId])
  @@index([listId])
}
